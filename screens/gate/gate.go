package gate

import (
	tb "gopkg.in/tucnak/telebot.v2"
	"net/http"
	"os"
	"skandigatebot/bot"
	pc "skandigatebot/components/pacs/config"
	a "skandigatebot/models/account"
	"skandigatebot/models/gateLog"
	u "skandigatebot/models/user"
	"skandigatebot/models/user/role"
	"skandigatebot/screens/admin"
	"strconv"
	"time"
)

const (
	textSelectAction     = "ü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
	OpenGateButton       = "üÖøÔ∏è –û—Ç–∫—Ä—ã—Ç—å —à–ª–∞–≥–±–∞—É–º"
	textGateOpening      = "üïê –®–ª–∞–≥–±–∞—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è‚Ä¶"
	textNonAuth          = "‚õîÔ∏è –í–∞–º –Ω–µ–ª—å–∑—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã."
	textGateOpened       = "üöô –®–ª–∞–≥–±–∞—É–º –æ—Ç–∫—Ä—ã—Ç!"
	textGateOpenError    = "‚ùå –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
	textGateAccessDenied = "‚ùóÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, –æ–¥–Ω–∞–∫–æ –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ê–û ¬´–í–ö –ö–æ–º—Ñ–æ—Ä—Ç¬ª –ø–æ –∞–¥—Ä–µ—Å—É –¥–æ–º 1 –∫–æ—Ä–ø—É—Å 3. –î–æ—Å—Ç—É–ø –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–µ–∑–¥–∞ –Ω–∞ —Å–º–µ–∂–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏."
)

type PGate struct {
	PAuth pauth
}

func New(pauth pauth) *PGate {
	return &PGate{
		PAuth: pauth,
	}
}

func (pg *PGate) OnOpen(m *tb.Message, b *tb.Bot) {
	account, user, _ := bot.GetAccountAndUser(m)

	if account.Phone > 0 && user.Phone > 0 {
		if user.IsActive() {
			pg.HideGateMenuWithMessage(textGateOpening, &account, &user, m, b)

			OpenGate(&user, m, b)

			pg.ShowGateMenu(&account, &user, m, b)
		} else {
			bot.SendMessage(textGateAccessDenied, m, b)
			pg.PAuth.ShowAuthMenu(&account, &user, m, b)
		}
	} else {
		bot.SendMessage(textNonAuth, m, b)
		pg.PAuth.ShowAuthMenu(&account, &user, m, b)
	}
}

func (pg *PGate) ShowGateMenu(account *a.Account, user *u.User, m *tb.Message, b *tb.Bot) {
	pg.ShowGateMenuWithMessage(textSelectAction, account, user, m, b)
}

func (pg *PGate) ShowGateMenuWithMessage(message string, account *a.Account, user *u.User, m *tb.Message, b *tb.Bot) {
	menu := &tb.ReplyMarkup{ResizeReplyKeyboard: true}
	btnOpenGate := menu.Text(OpenGateButton)
	btnAdmin := menu.Text(admin.OnAdminButton)

	if user.RoleId == role.Admin {
		menu.Reply(
			menu.Row(btnOpenGate, btnAdmin),
		)
	} else {
		menu.Reply(
			menu.Row(btnOpenGate),
		)
	}

	_, err := b.Send(m.Sender, message, menu)
	if err != nil {
		bot.SendMessageLog(err.Error(), b)
	}
}

func (pg *PGate) HideGateMenu(account *a.Account, user *u.User, m *tb.Message, b *tb.Bot) {
	pg.HideGateMenuWithMessage(textSelectAction, account, user, m, b)
}

func (pg *PGate) HideGateMenuWithMessage(message string, account *a.Account, user *u.User, m *tb.Message, b *tb.Bot) {
	menu := &tb.ReplyMarkup{ReplyKeyboardRemove: true}

	_, err := b.Send(m.Sender, message, menu)
	if err != nil {
		bot.SendMessageLog(err.Error(), b)
	}
}

func OpenGate(u *u.User, m *tb.Message, b *tb.Bot) {
	status := http.StatusOK

	if os.Getenv("ENV") == "prod" {
		conf := pc.New()

		client := &http.Client{}
		URL := conf.Host + "/data.cgx?cmd={\"Command\":\"ApplyProfile\",\"Number\":1}"

		req, err := http.NewRequest("GET", URL, nil)
		req.SetBasicAuth(conf.User, conf.Password)
		resp, err := client.Do(req)
		if err != nil {
			bot.SendMessageLog(err.Error(), b)
		}

		status = resp.StatusCode
	}

	logMessage := ""
	logMessage += os.Getenv("ENV")
	logMessage += " :: " + (time.Now()).Format("2006-01-02 15:04:05")

	if u.Phone != 0 {
		logMessage += " :: +" + strconv.Itoa(int(u.Phone))
	}

	logMessage += "\n"
	logMessage += "ü§ñ "
	logMessage += "<a href=\"tg://user?id=" + strconv.FormatInt(m.Sender.ID, 10) + "\">"
	logMessage += m.Sender.FirstName
	logMessage += " "
	logMessage += m.Sender.LastName

	if m.Sender.Username != "" {
		logMessage += " ("
		logMessage += m.Sender.Username
		logMessage += ")"
	}

	logMessage += "</a> "

	if status != http.StatusOK {
		bot.SendMessage(textGateOpenError, m, b)

		logMessage += "try to open gate and gets error"
		logMessage = "‚ÄºÔ∏è " + logMessage

		bot.SendMessageLog(logMessage, b)
		gateLog.LogFail(u.Id)
	} else {
		bot.SendMessage(textGateOpened, m, b)

		logMessage += "open gate"
		logMessage = "‚úÖ " + logMessage

		bot.SendMessageLog(logMessage, b)
		gateLog.LogSuccess(u.Id)
	}

}
